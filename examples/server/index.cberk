include "../include/std.cberk"

def AF_INET: int16 = 2;
def S_ADDR: int32 = 0;
def PORT: int16 = 5000;
def PAD: int = 0;

def SOCK_STREAM: int = 1;

def SOCKET_SYSCALL: int = 41;
def READ_SYSCALL: int = 0;
def WRITE_SYSCALL: int = 1;
def OPEN_SYSCALL: int = 2;
def CLSOE_SYSCALL: int = 3;
def ACCEPT_SYSCALL: int = 43;
def BIND_SYSCALL: int = 49;
def LISTEN_SYSCALL: int = 50;

def STDOUT: int = 1;

struct sockaddr_in {
    sa_prefix: int16,
    sin_port: int16,
    s_addr: int32,
    pad: int,
};

mem clientaddr 1024

mem read_data 4096

fun main() {
    def sockfd: int = syscall(SOCKET_SYSCALL, AF_INET, SOCK_STREAM, 0);
    write("SOCKET_SYSCALL return: ");
    print_int(sockfd);

    if sockfd < 0 {
        exit(1);
    }

    def sockaddr: sockaddr_in = sockaddr_in{
        sa_prefix: AF_INET,
        sin_port: PORT,
        s_addr: S_ADDR,
        pad: PAD,
    };

    def ptr_as_int: *int = sockaddr as *int;

    memset(ptr_as_int, 0, 16);

    -- sockaddr.sa_prefix = AF_INET;
    -- sockaddr.sin_port = PORT;
    -- sockaddr.s_addr  = S_ADDR;

    write("sa_prefix ", sockaddr.sa_prefix)
    write("sin_port ", sockaddr.sin_port)
    write("s_addr ", sockaddr.s_addr)
    write("pad ", sockaddr.pad)

    def clientaddr: sockaddr_in = sockaddr_in{
        sa_prefix: AF_INET,
        sin_port: PORT,
        s_addr: S_ADDR,
        pad: PAD,
    };

    def len: int32 = 0;

    def http_ok: str = "HTTP/1.1 200 OK\r\n";

    def bind_ret: int = syscall(BIND_SYSCALL, sockfd, &sockaddr, 16);
    write("BIND_SYSCALL return: ");
    print_int(bind_ret);
    write(bind_ret);

    if bind_ret < 0 {
        exit(1);
    }

    def listener: int = syscall(LISTEN_SYSCALL, sockfd, 10);
    write("LISTEN_SYSCALL return: ");
    print_int(listener);
    if listener < 0 {
        exit(1);
    }

    loop {
        def connfd: int = syscall(ACCEPT_SYSCALL, sockfd, 0, 0);
        write("ACCEPT_SYSCALL return: ");
        print_int(connfd);
        
        if connfd < 0 {
            exit(1);
        }

        def read_bytes: int = syscall(READ_SYSCALL, connfd, read_data, 4096);
        syscall(WRITE_SYSCALL, STDOUT, read_data, 4096);

        def write_ret: int = syscall(WRITE_SYSCALL, connfd, http_ok as *char, 19);
        write("Writing to connfd returned: ", write_ret);

        syscall(CLSOE_SYSCALL, connfd);
    }
}

main()
