PROGRAM                  -> STATEMENT[]
STATEMENT                -> VARIABLE_DECLARATION | CONDITIONAL_STATEMENT | COMPARISON_EXPRESSION | LPAREN COMPARISON_EXPRESSION RPAREN | LOOP
LOOP                     -> loop from LPAREN* EXPRESSION to EXPRESSION RPAREN* (with VAR_NAME)* LCURLY STATEMENT[] RCURLY
CONDITIONAL_STATEMENT    -> if LPAREN* COMPARISON_EXPRESSION RPAREN* LCURLY STATEMENT[]* RCURLY ELSE_STATEMENT*
ELSE_STATEMENT           -> else LCURLY STATEMENT[]* RCURLY
VARIABLE_DECLARATION     -> def VAR_NAME (-> COMPARISON_EXPRESSION)*
COMPARISON_EXPRESSION    -> EXPRESSION ((> | < | >= | <=) EXPRESSION)*
EXPRESSION               -> TERM (( + | - ) TERM)*                      # for precedence as term will be calculated first 
TERM                     -> FACTOR (( * | / ) FACTOR)*
COMMENT                  -> -- (ANY)* 
FACTOR                   -> INTEGER | FLOAT | LPAREN EXPRESSION RPAREN
VAR_NAME                 -> any valid identifier
LPAREN                   -> (
RPAREN                   -> )
LCURLY                   -> {
RCURLY                   -> }
