include "../examples/include/std.cberk"

def PROT_READ_PROT_WRITE: int = 3;
def MAP_PRIVATE_MAP_ANONYMOUS: int = 34;

mem read_file_mem 4096

fun write_int_into_mem(memory: *int, number: int) {
    def zero_ascii: int = 48;
    def n: int = number;

    def number_len: int = 0;
    
    loop {
        n = n / 10
        number_len += 1

        if n == 0 {
            break;
        }
    }

    def idx: int = number_len - 1;
    n = number

    loop {
        def c: int = n % 10;

        def idx_into_mem: *int8 = memory + idx;
        *idx_into_mem = c + zero_ascii;

        n = n / 10
        idx -= 1

        if n == 0 {
            break;
        }
    }
}

fun main() {
    write_int_into_mem(read_file_mem, 69420)
    syscall(WRITE_SYSCALL, STDOUT, read_file_mem, 5)
}

fun main2() {
    def hel: str = "hello_world\0";
    def capital_a: int8 = 65;

    def addr: int = syscall(MMAP_SYSCALL, 0, 1024, PROT_READ_PROT_WRITE, MAP_PRIVATE_MAP_ANONYMOUS, -1, 0);

    write("mmap ret = ")
    print_int(addr)

    def address: *int8 = addr as *int8;
    def addr_1: *int8 = address + 1;
    def addr_2: *int8 = address + 2;
    def addr_4: *int8 = address + 4;
    def addr_3: *int8 = address + 3;

    *address = 65;
    *addr_1 = 65;
    *addr_2 = 65;
    *addr_3 = 65;
    *addr_4 = 10;
               
    def write_ret: int = syscall(WRITE_SYSCALL, STDOUT, addr, 5)
    write("write ret = ")
    print_int(write_ret)
}

main()
